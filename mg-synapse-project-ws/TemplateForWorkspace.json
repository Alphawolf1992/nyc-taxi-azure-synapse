{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "mg-synapse-project-ws"
		},
		"LS_Taxi_Project_ADLS_Source_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_Taxi_Project_ADLS_Source'"
		},
		"mg-synapse-project-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'mg-synapse-project-ws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:mg-synapse-project-ws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"LS_Taxi_Project_ADLS_Source_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://mgsynapseprojectadls.dfs.core.windows.net/"
		},
		"LS_serverless_sql_pool_nyc_taxi_ldw_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "tcp:mg-synapse-project-ws-ondemand.sql.azuresynapse.net,1433"
		},
		"LS_serverless_sql_pool_nyc_taxi_ldw_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "nyc_taxi_ldw"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"mg-synapse-project-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://mgsynapseprojectadls.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Create_Silver_Taxi_Zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver taxi zone folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Silver_Taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "create silver taxi zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Silver taxi zone folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "if object_id ('silver.taxi_zone') is NOT NULL  \n    DROP EXTERNAL TABLE silver.taxi_zone;"
								},
								{
									"type": "NonQuery",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\n    WITH(\n            Data_source = nyc_taxi_src,\n            LOCATION = 'silver/taxi_zone',\n            FILE_FORMAT = parquet_file_format\n\n    ) \nAS \n\nselect \n* from \nbronze.taxi_zone;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2024-06-07T05:35:23Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Silver_Taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Create_Silver_Taxi_Zone_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver taxi zone folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Silver_Taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Stored procedure for create taxi zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Silver taxi zone folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "LS_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2024-06-07T05:35:27Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Silver_Taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Create_Silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folder_path_usp_name_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Silver  folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Silver_Taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_Folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "create silver table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Silver  folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_serverless_sql_pool_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_folder_path_usp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/calendar",
								"usp_name": "silver.usp_silver_calendar"
							},
							{
								"folder_path": "silver/taxi_zone",
								"usp_name": "silver.usp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/trip_type",
								"usp_name": "silver.usp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendor",
								"usp_name": "silver.usp_silver_vendor"
							},
							{
								"folder_path": "silver/rate_code",
								"usp_name": "silver.usp_silver_rate_code"
							},
							{
								"folder_path": "silver/payment_type",
								"usp_name": "silver.usp_silver_payment_type"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-06T14:26:22Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Silver_Taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "get trip year and month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw;\n\nselect DISTINCT\nyear,\nmonth\nfrom silver.vw_trip_data_green ;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach year and month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get trip year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get trip year and month').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete  partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Silver_Taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_Folder_path": {
													"value": "gold/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "create partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete  partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[usp_gold_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_serverless_sql_pool_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "create gold view",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DROP VIEW IF EXISTS\ngold.vw_trip_data_green;"
								},
								{
									"type": "Query",
									"text": "-- Create the view\nCREATE VIEW gold.vw_trip_data_green AS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM OPENROWSET(\n    BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'PARQUET'\n)\nWITH (\n    borough VARCHAR(15),\n    trip_date DATE,\n    trip_day VARCHAR(10),\n    trip_day_weekend_ind CHAR(1), \n    card_trip_count INT, \n    cash_trip_count INT,\n    street_hail_trip_count INT,\n    dispatch_trip_count INT,\n    trip_distance FLOAT,\n    trip_duration INT,\n    fare_amount FLOAT\n) AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-07T05:24:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_serverless_sql_pool_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/DS_Silver_Taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "get trip year and month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw;\n\nselect DISTINCT\nyear,\nmonth\nfrom bronze.vw_trip_data_green_csv ;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach year and month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get trip year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get trip year and month').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete  partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Silver_Taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_Folder_path": {
													"value": "silver/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "create partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete  partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_serverless_sql_pool_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-07T04:06:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_serverless_sql_pool_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/DS_Silver_Taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_execute_all_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute PL_create_silver_table",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Create_Silver_tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute PL_create_silver_trip_data_green",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_create_silver_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute PL_Gold_trip_data_green",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute PL_create_silver_table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute PL_create_silver_trip_data_green",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_create_gold_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-07T05:43:05Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_Create_Silver_tables')]",
				"[concat(variables('workspaceId'), '/pipelines/PL_create_silver_trip_data_green')]",
				"[concat(variables('workspaceId'), '/pipelines/PL_create_gold_trip_data_green')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Silver_Taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Taxi_Project_ADLS_Source",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_Folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_Folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Taxi_Project_ADLS_Source')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Silver_Taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Taxi_Project_ADLS_Source",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Taxi_Project_ADLS_Source')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_Taxi_Project_ADLS_Source')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_Taxi_Project_ADLS_Source_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_Taxi_Project_ADLS_Source_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_serverless_sql_pool_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('LS_serverless_sql_pool_nyc_taxi_ldw_properties_typeProperties_server')]",
					"database": "[parameters('LS_serverless_sql_pool_nyc_taxi_ldw_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"hostNameInCertificate": "",
					"authenticationType": "SystemAssignedManagedIdentity"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mg-synapse-project-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('mg-synapse-project-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mg-synapse-project-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('mg-synapse-project-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_check_duplicate_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- check duplicate in taxi zone data\nSELECT\n   LocationID,\n   count(1) as numbers_of_records\nFROM\n    OPENROWSET(\n        BULK 'https://mgsynapseprojectadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n',\n        PARSER_VERSION = '2.0'\n    ) \n    WITH(LocationID SMALLINT 1,\n        Borough VARCHAR(15) 2,\n        Zone varchar(50) 3,\n        service_zone varchar(15) 4\n    ) AS [result]\nGROUP BY LocationID\nHAVING COUNT(1) > 1;\n\n\n--borough\n\nSELECT\n   Borough,\n   count(2) as numbers_of_records\nFROM\n    OPENROWSET(\n        BULK 'https://mgsynapseprojectadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n',\n        PARSER_VERSION = '2.0'\n    ) \n    WITH(LocationID SMALLINT 1,\n        Borough VARCHAR(15) 2,\n        Zone varchar(50) 3,\n        service_zone varchar(15) 4\n    ) AS [result]\nGROUP BY Borough\nHAVING COUNT(2) > 1;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nIF OBJECT_ID('silver.rate_code') IS NOT NULL\n    DROP EXTERNAL TABLE silver.rate_code;\nGO\n\nCREATE EXTERNAL TABLE silver.rate_code\nWITH (\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/rate_code',\n    FILE_FORMAT = parquet_file_format\n) AS\n SELECT rate_code_id,rate_code\nFROM OPENROWSET(\n    BULK 'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n) \nWITH\n(\n    jsonDoc NVARCHAR(MAX)\n)\nas rate_code\nCROSS APPLY OPENJSON(jsonDoc)\nWITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n)\nGO\n\nSELECT * FROM silver.rate_code;\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_silver_paymrnt_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nIF OBJECT_ID('silver.payment_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type;\nGO\n\nCREATE EXTERNAL TABLE silver.payment_type\nWITH (\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/payment_type',\n    FILE_FORMAT = parquet_file_format\n) AS\nSELECT payment_type, description \nFROM OPENROWSET(\nView\n\nSearch\n\n    BULK 'raw/payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b'\n) WITH (\n    jsonDoc NVARCHAR(MAX)\n) AS payment_type\nCROSS APPLY OPENJSON(jsonDoc)\nWITH (\n    payment_type SMALLINT,\n    description VARCHAR(20) '$.payment_type_desc'\n);\nGO\n\nSELECT * FROM silver.payment_type;\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_data_quality_check')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- Identify any data quality issues in trip total amount\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\n\n\n-- check then data\n\nSELECT \n    MIN(result.total_amount) AS min_total_amount,\n    MAX(result.total_amount) AS max_total_amount,\n   ROUND(AVG(result.total_amount),2) AS avg_total_amount,\n   COUNT(1) as total_no_of_records,\n   COUNT(total_amount) as not_null_total_no_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS result;\n\n\nSELECT\n    payment_type,COUNT(1) as number_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\nwhere total_amount < 0\nGROUP BY payment_type\nORDER BY payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use  nyc_taxi_ldw\nGO\n\n/*\nIF OBJECT_ID('silver.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_data_green;\n\nCREATE EXTERNAL TABLE silver.trip_data_green\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/trip_data_green',\n    FILE_FORMAT = parquet_file_format\n) \nAS\nSELECT *\nFROM bronze.trip_data_green_csv;\n*/\n\n-- The above code is commented out and won't be executed\n\n\nEXEC silver.usp_silver_trip_data_green '2020', '01';\nEXEC silver.usp_silver_trip_data_green '2020', '02';\nEXEC silver.usp_silver_trip_data_green '2020', '03';\nEXEC silver.usp_silver_trip_data_green '2020', '04';\nEXEC silver.usp_silver_trip_data_green '2020', '05';\nEXEC silver.usp_silver_trip_data_green '2020', '06';\nEXEC silver.usp_silver_trip_data_green '2020', '07';\nEXEC silver.usp_silver_trip_data_green '2020', '08';\nEXEC silver.usp_silver_trip_data_green '2020', '09';\nEXEC silver.usp_silver_trip_data_green '2020', '10';\nEXEC silver.usp_silver_trip_data_green '2020', '11';\nEXEC silver.usp_silver_trip_data_green '2020', '12';\nEXEC silver.usp_silver_trip_data_green '2021', '01';\nEXEC silver.usp_silver_trip_data_green '2021', '02';\nEXEC silver.usp_silver_trip_data_green '2021', '03';\nEXEC silver.usp_silver_trip_data_green '2021', '04';\nEXEC silver.usp_silver_trip_data_green '2021', '05';\nEXEC silver.usp_silver_trip_data_green '2021', '06';\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\nWHERE PULOCATIONID IS NULL;\n\n--------------------------------------\n--Performing join\n\nSELECT taxi_zone.*,trip_data.*\nFROM\n    OPENROWSET(\n                BULK 'trip_data_green_parquet/year=2020/month=01/',\n                FORMAT = 'PARQUET',\n                DATA_SOURCE = 'nyc_taxi_data_raw'\n            ) AS trip_data\n    JOIN\n    OPENROWSET(\n        BULK 'https://mgsynapseprojectadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n',\n        PARSER_VERSION = '2.0'\n    ) \n    WITH(LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone varchar(50),\n        service_zone varchar(15)\n    ) AS taxi_zone\non trip_data.PULocationID = taxi_zone.locationId\n\n\n\n-----------------------------------------------------------------------------------------------------------------------\n\n-- count in join\n\nSELECT taxi_zone.borough, count(1) as number_of_trips\nFROM\n    OPENROWSET(\n                BULK 'trip_data_green_parquet/year=2020/month=01/',\n                FORMAT = 'PARQUET',\n                DATA_SOURCE = 'nyc_taxi_data_raw'\n            ) AS trip_data\n    JOIN\n    OPENROWSET(\n        BULK 'https://mgsynapseprojectadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n',\n        PARSER_VERSION = '2.0'\n    ) \n    WITH(LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone varchar(50),\n        service_zone varchar(15)\n    ) AS taxi_zone\non trip_data.PULocationID = taxi_zone.locationID\nGROUP BY  taxi_zone.borough\nORDER BY  number_of_trips DESC;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_silver_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n-- Drop the view if it exists\nIF OBJECT_ID('silver.vw_trip_data_green') IS NOT NULL\n    DROP VIEW silver.vw_trip_data_green;\nGO\n\n-- Create the view\nCREATE VIEW silver.vw_trip_data_green AS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM OPENROWSET(\n    BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'PARQUET'\n)\nWITH (\n    vendor_id INT,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),\n    rate_code_id INT,\n    pu_location_id INT,\n    do_location_id INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee FLOAT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type INT,\n    congestion_surcharge FLOAT\n)AS [result]\nGO\n\n-- Select top 100 records from the view\nSELECT TOP (100) *\nFROM silver.vw_trip_data_green;\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_simple_transformation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n\nSELECT \n    (DATEDIFF(minute, lpep_pickup_datetime, lpep_dropoff_datetime) / 60) AS from_hour,\n    ((DATEDIFF(minute, lpep_pickup_datetime, lpep_dropoff_datetime) / 60) + 1) AS to_hour, \n    COUNT(1) AS number_of_trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\nGROUP BY \n    (DATEDIFF(minute, lpep_pickup_datetime, lpep_dropoff_datetime) / 60),\n    ((DATEDIFF(minute, lpep_pickup_datetime, lpep_dropoff_datetime) / 60) + 1)\nORDER BY \n    from_hour, to_hour;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nEXEC gold.usp_gold_trip_data_green '2020','01';\nEXEC gold.usp_gold_trip_data_green '2020','02';\nEXEC gold.usp_gold_trip_data_green '2020','03';\nEXEC gold.usp_gold_trip_data_green '2020','04';\nEXEC gold.usp_gold_trip_data_green '2020','05';\nEXEC gold.usp_gold_trip_data_green '2020','06';\nEXEC gold.usp_gold_trip_data_green '2020','07';\nEXEC gold.usp_gold_trip_data_green '2020','08';\nEXEC gold.usp_gold_trip_data_green '2020','09';\nEXEC gold.usp_gold_trip_data_green '2020','10';\nEXEC gold.usp_gold_trip_data_green '2020','11';\nEXEC gold.usp_gold_trip_data_green '2020','12';\nEXEC gold.usp_gold_trip_data_green '2021','01';\nEXEC gold.usp_gold_trip_data_green '2021','02';\nEXEC gold.usp_gold_trip_data_green '2021','03';\nEXEC gold.usp_gold_trip_data_green '2021','04';\nEXEC gold.usp_gold_trip_data_green '2021','05';\nEXEC gold.usp_gold_trip_data_green '2021','06';\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_discovery_assingment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n/* Identify the percentage of cash and credit card trips by borough\nExample Data As below\n---------------------------------------------------------------------------------------------\nborough   total_trips  cash_trips  card_trips  cash_trips_percentage  card_trips_percentage\n---------------------------------------------------------------------------------------------\nBronx     2019         751         1268        37.20                  62.80\nBrooklyn  6435         2192        4243        34.06                  65.94\n---------------------------------------------------------------------------------------------\n*/\n\nWITH v_payment_type AS (\n    SELECT \n        CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) AS payment_type,\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(15)) AS payment_type_desc\n    FROM OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) WITH (\n        jsonDoc NVARCHAR(MAX)\n    ) AS payment_type\n),\nv_taxi_zone AS (\n    SELECT\n        location_id,\n        borough,\n        zone,\n        service_zone\n    FROM OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) WITH (\n        location_id SMALLINT,\n        borough VARCHAR(15),\n        zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    ) AS [result]\n),\nv_trip_data AS (\n    SELECT *\n    FROM OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2021/month=01/**',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\n)\nSELECT\n    v_taxi_zone.borough,\n    COUNT(1) AS total_trips,\n    SUM(CASE WHEN v_payment_type.payment_type_desc = 'Cash' THEN 1 ELSE 0 END) AS cash_trips,\n    SUM(CASE WHEN v_payment_type.payment_type_desc = 'Credit card' THEN 1 ELSE 0 END) AS card_trips,\n    CAST((SUM(CASE WHEN v_payment_type.payment_type_desc = 'Cash' THEN 1 ELSE 0 END) / CAST(COUNT(1) AS DECIMAL)) * 100 AS DECIMAL(5, 2)) AS cash_trips_percent,\n    CAST((SUM(CASE WHEN v_payment_type.payment_type_desc = 'Credit card' THEN 1 ELSE 0 END) / CAST(COUNT(1) AS DECIMAL)) * 100 AS DECIMAL(5, 2)) AS card_trips_percent\nFROM v_trip_data\nLEFT JOIN v_payment_type ON v_trip_data.payment_type = v_payment_type.payment_type\nLEFT JOIN v_taxi_zone ON v_trip_data.PULocationId = v_taxi_zone.location_id\nWHERE v_payment_type.payment_type_desc IN ('Cash', 'Credit card')\nGROUP BY v_taxi_zone.borough\nORDER BY v_taxi_zone.borough;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n-- Drop the view if it exists\nIF OBJECT_ID('gold.vw_trip_data_green') IS NOT NULL\n    DROP VIEW gold.vw_trip_data_green;\nGO\n\n-- Create the view\nCREATE VIEW gold.vw_trip_data_green AS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM OPENROWSET(\n    BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'PARQUET'\n)\nWITH (\n    borough VARCHAR(15),\n    trip_date DATE,\n    trip_day VARCHAR(10),\n    trip_day_weekend_ind CHAR(1), \n    card_trip_count INT, \n    cash_trip_count INT,\n    street_hail_trip_count INT,\n    dispatch_trip_count INT,\n    trip_distance FLOAT,\n    trip_duration INT,\n    fare_amount FLOAT\n) AS [result];\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_databases')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE MASTER\nGO\n\nCREATE DATABASE nyc_taxi_ldw;\nGO\n\nALTER DATABASE nyc_taxi_ldw COLLATE Latin1_General_100_BIN2_UTF8\nGO\n\nuse nyc_taxi_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--create new database\n\nCREATE DATABASE nyc_taxi_discovery;\n\nuse nyc_taxi_discovery;\n\n\n\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://mgsynapseprojectadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n\n\n-- Examine the datatypes for the columns\nEXEC sp_describe_first_result_set  N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://mgsynapseprojectadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        HEADER_ROW = TRUE,\n        PARSER_VERSION = ''2.0''\n    ) AS [result]'\n\n\n--- finding max column length of columns\nSELECT\n    MAX(LEN(LocationID)) as len_locationID,\n    max(len(Borough)) as Borough,\n     max(len(Zone)) as Zone,\n      max(len(service_zone)) as service_zone\nFROM\n    OPENROWSET(\n        BULK 'https://mgsynapseprojectadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n\n\n--- with clause to provide explicit data type\n\nSELECT\n   *\nFROM\n    OPENROWSET(\n        BULK 'https://mgsynapseprojectadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n',\n        PARSER_VERSION = '2.0'\n    ) \n    WITH(LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone varchar(50),\n        service_zone varchar(15)\n    ) AS [result]\n\n\n\n\nEXEC sp_describe_first_result_set N'SELECT\n   *\nFROM\n    OPENROWSET(\n        BULK ''https://mgsynapseprojectadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '','',\n        ROWTERMINATOR = ''\\n'',\n        PARSER_VERSION = ''2.0''\n    ) \n    WITH(LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone varchar(50),\n        service_zone varchar(15)\n    ) AS [result]' \n\n\n\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n\n-- This is auto-generated code using abfss protocol\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@mgsynapseprojectadls.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n\n\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------\n\ncreate external data source nyc_taxi_data_raw\nwith (\n    location = 'abfss://nyc-taxi-data@mgsynapseprojectadls.dfs.core.windows.net/raw/'\n)\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_data_green\n    @year VARCHAR(10),\n    @month VARCHAR(10)\nAS\nBEGIN\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n\n    -- Construct the dynamic SQL for creating the external table\n    SET @create_sql_stmt = '\n    CREATE EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month + '\n    WITH (\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = ''silver/trip_data_green/year=' + @year + '/month=' + @month + ''',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    SELECT  [VendorID] AS vendor_id,\n        [lpep_pickup_datetime],\n        [lpep_dropoff_datetime],\n        [store_and_fwd_flag],\n        [total_amount],\n        [payment_type],\n        [trip_type],\n        [congestion_surcharge],\n        [extra],\n        [mta_tax],\n        [tip_amount],\n        [tolls_amount],\n        [ehail_fee],\n        [improvement_surcharge],\n        [RatecodeID] AS rate_code_id,\n        [PULocationID] AS pu_location_id,\n        [DOLocationID] AS do_location_id,\n        [passenger_count],\n        [trip_distance],\n        [fare_amount]\n    FROM bronze.vw_trip_data_green_csv\n    WHERE year = ''' + @year + ''' AND month = ''' + @month + ''';';\n\n    -- Print the create statement for debugging purposes\n    PRINT (@create_sql_stmt);\n\n    -- Execute the dynamic SQL statement\n    EXEC sp_executesql @create_sql_stmt;\n\n    -- Construct the dynamic SQL for dropping the external table\n    SET @drop_sql_stmt = 'DROP EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month + ';';\n\n    -- Print the drop statement for debugging purposes\n    PRINT (@drop_sql_stmt);\n\n    -- Execute the dynamic SQL statement to drop the table\n    EXEC sp_executesql @drop_sql_stmt;\nEND;\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_external_data_sources')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_src\nWITH (\n    LOCATION = 'https://mgsynapseprojectadls.dfs.core.windows.net/nyc-taxi-data'\n   );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery ;\n\nSELECT * \nFROM OPENROWSET(\n    BULK 'calendar.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) AS cal ;\n\nEXEC sp_describe_first_result_set N'SELECT * \nFROM OPENROWSET(\n    BULK ''calendar.csv'',\n    DATA_SOURCE = ''nyc_taxi_data_raw'',\n    FORMAT = ''CSV'',\n    PARSER_VERSION = ''2.0'',\n    HEADER_ROW = TRUE\n) AS cal' ;\n\n\nSELECT * \nFROM OPENROWSET(\n    BULK 'calendar.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) \n\nWITH\n(\n    date_key int,\n    date date,\n    year SMALLINT,\n    month TINYINT,\n    day TINYINT,\n    day_name VARCHAR(10),\n    day_of_year  SMALLINT,\n    week_of_month TINYINT,\n    week_of_year TINYINT,\n    month_name VARCHAR(10),\n    year_month int,\n    year_week int\n)AS cal ;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data_green\n    @year VARCHAR(10),\n    @month VARCHAR(10)\nAS\nBEGIN\n    DECLARE @table_name NVARCHAR(MAX) = 'gold.trip_data_green_' + @year + '_' + @month;\n    DECLARE @create_sql_stmt NVARCHAR(MAX);\n    DECLARE @drop_sql_stmt NVARCHAR(MAX);\n    DECLARE @table_exists BIT;\n\n    -- Check if the table exists\n    SELECT @table_exists = CASE WHEN EXISTS (SELECT 1 FROM sys.external_tables WHERE name = @table_name AND schema_id = SCHEMA_ID('gold')) THEN 1 ELSE 0 END;\n\n    IF @table_exists = 1\n    BEGIN\n        -- Drop the existing table\n        SET @drop_sql_stmt = 'DROP EXTERNAL TABLE ' + @table_name;\n        EXEC sp_executesql @drop_sql_stmt;\n    END\n\n    -- Create the external table\n    SET @create_sql_stmt = '\n    CREATE EXTERNAL TABLE ' + @table_name + ' \n    WITH \n    (\n        LOCATION = ''/gold/trip_data_green/year=' + @year + '/month=' + @month + ''',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n    SELECT\n        td.year,\n        td.month,\n        tz.borough,\n        CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n        cal.day_name AS trip_day,\n        CASE WHEN cal.day_name IN (''Saturday'', ''Sunday'') THEN ''Y'' ELSE ''N'' END AS trip_day_weekend_ind,\n        SUM(CASE WHEN pt.description = ''Credit card'' THEN 1 ELSE 0 END) AS card_trip_count,\n        SUM(CASE WHEN pt.description = ''Cash'' THEN 1 ELSE 0 END) AS cash_trip_count,\n        SUM(CASE WHEN tt.trip_type_desc = ''Street-hail'' THEN 1 ELSE 0 END) AS street_hail_trip_count,\n        SUM(CASE WHEN tt.trip_type_desc = ''Dispatch'' THEN 1 ELSE 0 END) AS dispatch_trip_count,\n        SUM(td.trip_distance) AS trip_distance,\n        SUM(DATEDIFF(MINUTE, td.lpep_pickup_datetime, td.lpep_dropoff_datetime)) AS trip_duration,\n        SUM(td.fare_amount) AS fare_amount\n    FROM\n        silver.vw_trip_data_green td\n        JOIN silver.taxi_zone tz ON td.pu_location_id = tz.location_id\n        JOIN silver.calendar cal ON cal.date = CONVERT(DATE, td.lpep_pickup_datetime)\n        JOIN silver.payment_type pt ON td.payment_type = pt.payment_type\n        JOIN silver.trip_type tt ON td.trip_type = tt.trip_type\n    WHERE\n        td.year = ''' + @year + ''' AND td.month = ''' + @month + '''\n    GROUP BY\n        td.year,\n        td.month,\n        tz.borough,\n        CONVERT(DATE, td.lpep_pickup_datetime),\n        cal.day_name;';\n\n    -- Print and execute the dynamic SQL\n    PRINT (@create_sql_stmt);\n    EXEC sp_executesql @create_sql_stmt;\nEND;\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_external_file_format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\n\nCREATE EXTERNAL FILE FORMAT csv_file_format\nWITH(\n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS(\n        FIELD_TERMINATOR = ',',\n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2,\n        USE_TYPE_DEFAULT = FALSE,\n        ENCODING = 'UTF8',\n        PARSER_VERSION = '2.0'\n    )\n);\n\n\n\n-- Create file format csv_file_format for parser version 2.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'csv_file_format')\nBEGIN\n    CREATE EXTERNAL FILE FORMAT csv_file_format\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n            FIELD_TERMINATOR = ',',\n            STRING_DELIMITER = '',\n            FIRST_ROW = 2,\n            USE_TYPE_DEFAULT = FALSE,\n            ENCODING = 'UTF8',\n            PARSER_VERSION = '2.0'\n        )\n    );\nEND;\n\n-- Create file format csv_file_format_pv1 for parser version 1.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'csv_file_format_pv1')\nBEGIN\n    CREATE EXTERNAL FILE FORMAT csv_file_format_pv1\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n            FIELD_TERMINATOR = ',',\n            STRING_DELIMITER = '',\n            FIRST_ROW = 2,\n            USE_TYPE_DEFAULT = FALSE,\n            ENCODING = 'UTF8',\n            PARSER_VERSION = '1.0'\n        )\n    );\nEND;\n\n\n\n-- Create file format tsv_file_format for parser version 2.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'tsv_file_format')\nBEGIN\n    CREATE EXTERNAL FILE FORMAT tsv_file_format\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n            FIELD_TERMINATOR = '\\t',\n            STRING_DELIMITER = '',\n            FIRST_ROW = 2,\n            USE_TYPE_DEFAULT = FALSE,\n            PARSER_VERSION = '2.0',\n            ENCODING = 'UTF8'\n        )\n    );\nEND;\n\n-- Create file format tsv_file_format_pv1 for parser version 1.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'tsv_file_format_pv1')\nBEGIN\n    CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n            FIELD_TERMINATOR = '\\t',\n            STRING_DELIMITER = '',\n            FIRST_ROW = 2,\n            USE_TYPE_DEFAULT = FALSE,\n            ENCODING = 'UTF8',\n            PARSER_VERSION = '1.0'\n        )\n    );\nEND;\n\n\n-- create external file format parquet file\nif not exists (select * from sys.external_file_formats WHERE name = 'parquet_file_format')\n\n    CREATE EXTERNAL FILE FORMAT parquet_file_format\n    WITH(\n        FORMAT_TYPE = PARQUET,\n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n    );\n\n\n-- create external file format delta file\nif not exists (select * from sys.external_file_formats WHERE name = 'delta_file_format')\n\n    CREATE EXTERNAL FILE FORMAT delta_file_format\n    WITH(\n        FORMAT_TYPE = delta,\n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n    );\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "\nuse nyc_taxi_discovery;\n\nSELECT * \nFROM OPENROWSET(\n    BULK 'vendor_unquoted.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as vendor ;\n\nSELECT * \nFROM OPENROWSET(\n    BULK 'vendor_escaped.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    ESCAPECHAR ='\\\\'\n) as vendor ;\n\n\nSELECT * \nFROM OPENROWSET(\n    BULK 'vendor.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDQUOTE = '\"'\n) as vendor",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "use nyc_taxi_ldw\ngo\n \nCREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone\nAS\nBEGIN\n\nif object_id ('silver.taxi_zone') is NOT NULL  \n    DROP EXTERNAL TABLE silver.taxi_zone;\n\nCREATE EXTERNAL TABLE silver.taxi_zone\n    WITH(\n            Data_source = nyc_taxi_src,\n            LOCATION = 'silver/taxi_zone',\n            FILE_FORMAT = parquet_file_format\n\n    ) \nAS \n\nselect \n* from \nbronze.taxi_zone;\n\nEND;\n\n\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_bronze_table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Create taxi_zone table\nIF OBJECT_ID('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone;\nCREATE EXTERNAL TABLE bronze.taxi_zone (\n    location_id SMALLINT,\n    borough VARCHAR(15),\n    zone VARCHAR(50),\n    service_zone VARCHAR(15)\n)\nWITH (\n    LOCATION= 'raw/taxi_zone.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/taxi_zone'\n);\nSELECT * FROM bronze.taxi_zone;\n\n-- Create calendar table\nIF OBJECT_ID('bronze.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calendar;\nCREATE EXTERNAL TABLE bronze.calendar (\n    date_key INT,\n    date DATE,\n    year SMALLINT,\n    month TINYINT,\n    day TINYINT,\n    day_name VARCHAR(10),\n    day_of_year SMALLINT,\n    week_of_month TINYINT,\n    week_of_year TINYINT,\n    month_name VARCHAR(10),\n    year_month INT,\n    year_week INT\n)\nWITH (\n    LOCATION = 'raw/calendar.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/calendar'\n);\nSELECT * FROM bronze.calendar;\n\n-- Create vendor table\nIF OBJECT_ID('bronze.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendor;\nCREATE EXTERNAL TABLE bronze.vendor (\n    vendor_id TINYINT,\n    vendor_name VARCHAR(50)\n)\nWITH (\n    LOCATION = 'raw/vendor.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/vendor'\n);\nSELECT * FROM bronze.vendor;\n\n-- Create trip_type table\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type;\nCREATE EXTERNAL TABLE bronze.trip_type (\n    trip_type TINYINT,\n    trip_type_desc VARCHAR(50)\n)\nWITH (\n    LOCATION = 'raw/trip_type.tsv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = tsv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/trip_type'\n);\nSELECT * FROM bronze.trip_type;\n\n\n-- Drop the external table if it already exists\nIF OBJECT_ID('bronze.trip_data_green_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_csv;\n\n-- Create the external table\nCREATE EXTERNAL TABLE bronze.trip_data_green_csv (\n    VendorID INT,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type INT,\n    congestion_surcharge FLOAT\n)\nWITH (\n    LOCATION = 'raw/trip_data_green_csv/**',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format\n);\n\n-- Query the data from the external table\nSELECT TOP 100 * FROM bronze.trip_data_green_csv;\n\n\n---- parquet table\n\n-- Drop the external table if it already exists\nIF OBJECT_ID('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet;\n\n-- Create the external table for parquet\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet (\n    VendorID INT,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type INT,\n    congestion_surcharge FLOAT\n)\nWITH (\n    LOCATION = 'raw/trip_data_green_parquet/**',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n);\n\n-- Query the data from the external table\nSELECT TOP 100 * FROM bronze.trip_data_green_parquet;\n\n\n-- Assuming parquet_file_format is already created\n-- If not, you should create it first before creating the external table\n\n-- Create the external table for Delta format data\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta (\n    VendorID INT,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type INT,\n    congestion_surcharge FLOAT\n)\nWITH (\n    LOCATION = 'raw/trip_data_green_delta',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = delta_file_format\n);\n\n-- Query the data from the external table\nSELECT TOP 100 * FROM bronze.trip_data_green_delta;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explote_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nSELECT CAST(JSON_VALUE(jsonDoc,'$.payment_type') as SMALLINT) payment_type,\n        CAST(JSON_VALUE(jsonDoc,'$.payment_type_desc') as VARCHAR(15))payment_type_desc\nFROM OPENROWSET(\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n) \nWITH\n(\n    jsonDoc VARCHAR(MAX)\n)\nas payment_type ;\n\n\n\n-----------------------------------------------------------------------------------------------------\n\nEXEC sp_describe_first_result_set \nN'SELECT \n    CAST(JSON_VALUE(jsonDoc, ''$.payment_type'') AS SMALLINT) AS payment_type,\n    CAST(JSON_VALUE(jsonDoc, ''$.payment_type_desc'') AS VARCHAR(15)) AS payment_type_desc\nFROM OPENROWSET(\n    BULK ''payment_type.json'',\n    DATA_SOURCE = ''nyc_taxi_data_raw'',\n    FORMAT = ''CSV'',\n    PARSER_VERSION = ''2.0'',\n    FIELDTERMINATOR = ''0x0b'',\n    FIELDQUOTE = ''0x0b'',\n    ROWTERMINATOR = ''0x0a''\n) \nWITH\n(\n    jsonDoc VARCHAR(MAX)\n) AS payment_type';\n\n\n-----------------------------------------------------------------------------------------------------------------------------------\n\nSELECT payment_type,description\nFROM OPENROWSET(\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b'\n) \nWITH\n(\n    jsonDoc VARCHAR(MAX)\n)\nas payment_type \nCROSS APPLY OPENJSON(jsonDoc)\nWITH(\n    payment_type SMALLINT,\n    description VARCHAR(20) '$.payment_type_desc'\n);\n\n\n\n-----------------------------------------------------------------------------------------------------------------------------\n-- Reading data from json With Arrays\n-----------------------------------------------------------------------------------------------------------------------------\n\nSELECT *\nFROM OPENROWSET(\n    BULK 'payment_type_array.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n) \nWITH\n(\n    jsonDoc NVARCHAR(MAX)\n)\nas payment_type \nCROSS APPLY OPENJSON(JsonDoc)\nWITH(\n    payment_type SMALLINT,\n    payment_type_desc NVARCHAR(MAX) AS JSON\n) \nCROSS APPLY OPENJSON(payment_type_desc)\nWITH(\n    sub_type SMALLINT,\n    value VARCHAR(20)\n);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_usp_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_calendar\nAS\nBEGIN\nIF OBJECT_ID('silver.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar;\n\nCREATE EXTERNAL TABLE silver.calendar \nWITH (\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/calendar',\n    FILE_FORMAT = parquet_file_format\n) AS\nSELECT *\nFROM bronze.calendar;\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\nCREATE VIEW bronze.vw_rate_code\nAS\nSELECT rate_code_id,rate_code\nFROM OPENROWSET(\n    BULK 'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n) \nWITH\n(\n    jsonDoc NVARCHAR(MAX)\n)\nas rate_code\nCROSS APPLY OPENJSON(jsonDoc)\nWITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n);\n\n\nselect * from bronze.vw_rate_code\n\n\n\n--- Create view on payment file\n\n-- Create view for payment type file\nDROP VIEW IF EXISTS bronze.vw_payment_type\nGO\n\nCREATE VIEW bronze.vw_payment_type\nAS\nSELECT payment_type, description\nFROM OPENROWSET(\n    BULK 'raw/payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b'\n) WITH (\n    jsonDoc NVARCHAR(MAX)\n) AS payment_type\nCROSS APPLY OPENJSON(jsonDoc)\nWITH (\n    payment_type SMALLINT,\n    description VARCHAR(20) '$.payment_type_desc'\n)\nGO\n\nSELECT * FROM bronze.vw_payment_type\nGO\n\n\n--- create view for trip_data_green\n\ndrop VIEW bronze.vw_trip_data_green_csv\n\nCREATE  VIEW bronze.vw_trip_data_green_csv\nAS\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\nOPENROWSET(\n    BULK 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n)WITH \n(\n        VendorID INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee FLOAT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  AS [result]\n\n\n\nSELECT top 100 * from bronze.vw_trip_data_green_csv",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-----------------------------------------------------------------------------------------------------------------------------\n-- Reading data from json With Arrays\n-----------------------------------------------------------------------------------------------------------------------------\n\nuse nyc_taxi_discovery;\n\nSELECT *\nFROM OPENROWSET(\n    BULK 'payment_type_array.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n) \nWITH\n(\n    jsonDoc NVARCHAR(MAX)\n)\nas payment_type \nCROSS APPLY OPENJSON(JsonDoc)\nWITH(\n    payment_type SMALLINT,\n    payment_type_desc NVARCHAR(MAX) AS JSON\n) \nCROSS APPLY OPENJSON(payment_type_desc)\nWITH(\n    sub_type SMALLINT,\n    value VARCHAR(20)\n);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_usp_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n\nCREATE  OR ALTER PROCEDURE silver.usp_silver_trip_type\nAS\nBEGIN\nIF OBJECT_ID('silver.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_type;\n\n\nCREATE EXTERNAL TABLE silver.trip_type\nWITH (\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/trip_type',\n    FILE_FORMAT = parquet_file_format\n) AS\nSELECT *\nFROM bronze.trip_type;\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_USP_create_silver_vender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_vendor\nAS\nBEGIN\nIF OBJECT_ID('silver.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE silver.vendor;\n\nCREATE EXTERNAL TABLE silver.vendor\nWITH (\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/vendor',\n    FILE_FORMAT = parquet_file_format\n) AS\nSELECT *\nFROM bronze.vendor;\nEND;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\ngo\n\n-- create taxi zone table \nif object_id ('silver.taxi_zone') is NOT NULL  \n    DROP EXTERNAL TABLE silver.taxi_zone\ngo\n\n\nCREATE EXTERNAL TABLE silver.taxi_zone\n    WITH(\n            Data_source = nyc_taxi_src,\n            LOCATION = 'silver/taxi_zone',\n            FILE_FORMAT = parquet_file_format\n\n    ) \nAS \n\nselect \n* from \nbronze.taxi_zone;\n\n\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n\nSELECT rate_code_id,rate_code\nFROM OPENROWSET(\n    BULK 'rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n) \nWITH\n(\n    jsonDoc NVARCHAR(MAX)\n)\nas rate_code\nCROSS APPLY OPENJSON(jsonDoc)\nWITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n);\n\n\n\n-----------------------------------------------------------------------------------------------------------\n-- Process multiline json\n\n\nSELECT rate_code_id,rate_code\nFROM OPENROWSET(\n    BULK 'rate_code_multi_line.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n) \nWITH\n(\n    jsonDoc NVARCHAR(MAX)\n)\nas rate_code\nCROSS APPLY OPENJSON(jsonDoc)\nWITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n);\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nIF OBJECT_ID('silver.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar\nGO\n\nCREATE EXTERNAL TABLE silver.calendar \nWITH (\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/calendar',\n    FILE_FORMAT = parquet_file_format\n) AS\nSELECT *\nFROM bronze.calendar\nGO\n\nSELECT * FROM silver.calendar\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery ;\n   \n   \n   \n   \nselect * FROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n\n--------------------------------------------------------------------------------------------------------\n\n-- Select data from Folder\n\nselect * FROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n\n------------------------------------------------------------------------------------------------------------\n\n-- Select data From Subfolder\n\nselect * FROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**',  --- USE ** FROM GET THE DATA FROM SUB FOLDER\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n--------------------------------------------------------------------------------------------------------------------\n\n-- Get the data from more than one file\n\nselect * FROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01/*.csv','trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n\n--------------------------------------------------------------------------------------------------------------\n\n-- Use more than 1 wildcard character \n\nselect * FROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n\n\n------------------------------------------------------------------------------------------------------\n\n-- File meatadata function filename()\n\nselect result.filename() as file_name ,\nresult.*  \nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n\n-----------------------------------------------------------------------------------------------------------------------------------\n\n-- count the records\n\nselect result.filename() as file_name ,\ncount(1) as record_count \nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nGROUP BY result.filename()\nORDER BY result.filename();\n\n\n------------------------------------------------------------------------------------------------------------------------------\n\n-- Limit the data using filename\n\nselect result.filename() as file_name ,\ncount(1) as record_count \nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nWHERE result.filename() in ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\nGROUP BY result.filename()\nORDER BY result.filename();\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n-- Using filepath()\n\nselect result.filename() as file_name ,\n    result.filepath(1) as year,\n     result.filepath(2) as MONTH,\ncount(1) as record_count \nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\nGROUP BY result.filename(), result.filepath(1),result.filepath(2)\nORDER BY result.filename(),  result.filepath(1),result.filepath(2);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_usp_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_rate_code\nas \nBEGIN\nIF OBJECT_ID('silver.rate_code') IS NOT NULL\n    DROP EXTERNAL TABLE silver.rate_code;\nCREATE EXTERNAL TABLE silver.rate_code\nWITH (\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/rate_code',\n    FILE_FORMAT = parquet_file_format\n) AS\n SELECT rate_code_id,rate_code\nFROM OPENROWSET(\n    BULK 'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n) \nWITH\n(\n    jsonDoc NVARCHAR(MAX)\n)\nas rate_code\nCROSS APPLY OPENJSON(jsonDoc)\nWITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n);\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nIF OBJECT_ID('silver.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_type;\nGO\n\nCREATE EXTERNAL TABLE silver.trip_type\nWITH (\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/trip_type',\n    FILE_FORMAT = parquet_file_format\n) AS\nSELECT *\nFROM bronze.trip_type;\nGO\n\nSELECT * FROM silver.trip_type;\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_trip_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n\n\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\n\n-- identify the inferred data types\n\nEXEC sp_describe_first_result_set  N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_parquet/year=2020/month=01/'',\n        FORMAT = ''PARQUET'',\n        DATA_SOURCE = ''nyc_taxi_data_raw''\n    ) AS [result]'\n\n\n-- difing data types\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) \n    WITH(\n        VendorID INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee FLOAT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    ) AS [result]\n\n\n\n-------\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) \n   WITH (\n  VendorID INT,\n  lpep_pickup_datetime datetime2(7),\n  lpep_dropoff_datetime datetime2(7),\n  store_and_fwd_flag CHAR(1),\n  RatecodeID INT,\n  PULocationID INT,\n  DOLocationID INT,\n  passenger_count INT,\n  trip_distance FLOAT,\n  fare_amount FLOAT,\n  extra FLOAT,\n  mta_tax FLOAT,\n  tip_amount FLOAT,\n  tolls_amount FLOAT,\n  ehail_fee INT,\n  improvement_surcharge FLOAT,\n  total_amount FLOAT,\n  payment_type INT,\n  trip_type INT,\n  congestion_surcharge FLOAT\n)\n AS [result];\n\n-----------------------------------------------------------------------------------------------------\n\n--- 1 .Query using Wild card character\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\n\n\n-- 2.Get Filename\n\nSELECT top 100 \n        trip_data.filename() as file_name,\n        trip_data.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\n\n\n-- 3.Query from sun folder\n\nSELECT top 100 \n        trip_data.filename() as file_name,\n        trip_data.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\n\n--4.Use filepath() to target partition\n\nSELECT  trip_data.filepath(1) as year,\n        trip_data.filepath(2) as Month,\n        COUNT(1)  as record_count\n        FROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\nwhere trip_data.filepath(1) = '2020'\nand trip_data.filepath(2) in ('06','07','08')\nGROUP by  trip_data.filepath(1),trip_data.filepath(2)\nORDER by  trip_data.filepath(1),trip_data.filepath(2);\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_usp_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_payment_type\nAS\nBEGIN\nIF OBJECT_ID('silver.payment_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type;\n\nCREATE EXTERNAL TABLE silver.payment_type\nWITH (\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/payment_type',\n    FILE_FORMAT = parquet_file_format\n) AS\nSELECT payment_type, description \nFROM OPENROWSET(\n    BULK 'raw/payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b'\n) WITH (\n    jsonDoc NVARCHAR(MAX)\n) AS payment_type\nCROSS APPLY OPENJSON(jsonDoc)\nWITH (\n    payment_type SMALLINT,\n    description VARCHAR(20) '$.payment_type_desc'\n);\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_vender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nIF OBJECT_ID('silver.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE silver.vendor;\nGO\n\nCREATE EXTERNAL TABLE silver.vendor\nWITH (\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/vendor',\n    FILE_FORMAT = parquet_file_format\n) AS\nSELECT *\nFROM bronze.vendor;\nGO\n\nSELECT * FROM silver.vendor;\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery; \n\nSELECT TOP 100 \n        * \n    FROM OPENROWSET(\n            BULK 'trip_data_green_delta',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'DELTA'\n    ) AS trip_data\n\n-- Quering sub folder\n\nSELECT TOP 100 \n        * \n    FROM OPENROWSET(\n            BULK 'trip_data_green_delta/year=2020',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'DELTA'\n    ) AS trip_data\n\n-- defing data type\n\nSELECT TOP 100 \n        * \n    FROM OPENROWSET(\n            BULK 'trip_data_green_delta',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'DELTA'\n    ) WITH\n    \n    (  VendorID INT,\n  lpep_pickup_datetime datetime2(7),\n  lpep_dropoff_datetime datetime2(7),\n  store_and_fwd_flag CHAR(1),\n  RatecodeID INT,\n  PULocationID INT,\n  DOLocationID INT,\n  passenger_count INT,\n  trip_distance FLOAT,\n  fare_amount FLOAT,\n  extra FLOAT,\n  mta_tax FLOAT,\n  tip_amount FLOAT,\n  tolls_amount FLOAT,\n  ehail_fee INT,\n  improvement_surcharge FLOAT,\n  total_amount FLOAT,\n  payment_type INT,\n  trip_type INT,\n  congestion_surcharge FLOAT,\n  year VARCHAR(4),\n  month VARCHAR(2)\n )AS trip_data",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/coursepool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "centralindia"
		}
	]
}